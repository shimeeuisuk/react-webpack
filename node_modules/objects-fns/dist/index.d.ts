export interface anyObject {
    [key: string]: any;
    [key: number]: any;
}
export declare type PathElement = string | number | symbol;
declare const objKeys: {
    (o: object): string[];
    (o: {}): string[];
};
declare const objKeysNSymb: (obj: any) => any[];
declare const objMap: (object: any, fn: (item: any, track: string[]) => any, track?: string[]) => any;
declare function objSplit(obj: anyObject, fn: Function, byKey?: boolean): any[];
declare function splitBy$(obj: anyObject): any[];
declare function getIn(state: any, ...paths: any[]): any;
declare function hasIn(state: any, ...paths: any[]): boolean;
declare function setIn(state: any, value: any, ...paths: any[]): any;
declare function string2path(path: string, { str2sym, replace }?: any): PathElement[];
declare function resolvePath(path: PathElement[], base?: PathElement[]): any[];
export { objSplit, splitBy$, objMap, objKeys, objKeysNSymb, getIn, hasIn, setIn, string2path, resolvePath };
declare function push2array(array: any[], ...vals: any[]): any;
declare function moveArrayElems(arr: any[], from: number, to: number): Array<any>;
declare const intoArray: (value: any) => any[];
export { push2array, moveArrayElems, intoArray };
